/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.intellij.lang.batch.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.lang.batch.BatchTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>idea-batch/src/main/java/org/intellij/lang/batch/lexer/Batch.flex</tt>
 */
final class _BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NEXT_SYM = 2;
  public static final int CALL = 4;
  public static final int ECHO = 6;
  public static final int ECHO_SYM = 8;
  public static final int FOR = 10;
  public static final int FOR_IN = 12;
  public static final int GOTO = 14;
  public static final int IF = 16;
  public static final int IF_EXIST = 18;
  public static final int IF_DIGIT = 20;
  public static final int IF_VARIABLE = 22;
  public static final int IF_EQUAL = 24;
  public static final int REM = 26;
  public static final int SET = 28;
  public static final int SET_VALUE = 30;
  public static final int COMMAND = 32;
  public static final int LABEL = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4032 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\17\5\1\6\1\7\11\5\1\10\1\11\1\5\1\12\1\13\11\5\1\14\14"+
    "\5\1\15\2\5\1\16\u01e2\5");

  /* The ZZ_CMAP_Y table has 960 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\4\5\1\6\1\5\1\7\47\5\1\10\3\5\1\11\6\5\1\10\14\5\1\12"+
    "\3\5\1\12\3\5\1\12\3\5\1\12\3\5\1\12\3\5\1\12\3\5\1\12\3\5\1\12\3\5\1\12\3"+
    "\5\1\12\2\5\1\11\3\5\1\11\2\5\1\10\10\5\1\10\1\5\1\11\72\5\1\10\1\11\11\5"+
    "\1\12\3\5\1\11\5\5\1\13\5\5\1\11\2\5\1\11\4\5\1\13\36\5\1\14\257\5\1\10\24"+
    "\5\1\11\1\5\1\10\5\5\2\11\2\5\1\11\14\5\1\11\130\5\1\11\54\5\1\10\35\5\1\12"+
    "\3\5\1\11\1\5\1\15\4\5\1\11\10\5\1\11\12\5\1\11\3\5\1\11\13\5\1\11\3\5\1\10"+
    "\2\5\1\11\15\5\1\10\32\5\1\11\60\5\1\10\6\5\1\11\143\5\1\16\1\17\12\5\1\11"+
    "\65\5");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\1\13\1\14\1\2\22\0\1\1\1\0\1\3\3\0\1\7\1\0\1\40\1\41\2\0\1\5"+
    "\2\0\1\34\12\45\1\16\1\5\1\10\1\44\1\11\1\35\1\15\1\20\1\0\1\17\1\37\1\25"+
    "\1\27\1\22\1\26\1\31\2\0\1\21\1\33\1\36\1\23\2\0\1\30\1\32\1\24\1\0\1\43\1"+
    "\0\1\42\3\0\1\4\1\0\1\12\2\0\1\20\1\0\1\17\1\37\1\25\1\27\1\22\1\26\1\31\2"+
    "\0\1\21\1\33\1\36\1\23\2\0\1\30\1\32\1\24\1\0\1\43\1\0\1\42\3\0\1\6\10\0\1"+
    "\13\112\0\2\31\55\0\1\32\12\45\46\0\12\45\14\0\12\45\20\0\12\45\6\0\12\45"+
    "\16\0\2\13\54\0\12\45\16\0\62\45");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\1\1\12\4\13\1\1"+
    "\1\14\1\15\1\14\1\16\1\14\1\16\1\17\1\20"+
    "\4\17\1\21\1\22\1\23\2\22\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\32\1\30\1\33\1\34\6\33"+
    "\1\13\1\35\1\13\1\36\1\13\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\13\1\45\1\46\1\47\1\50"+
    "\1\47\1\0\1\51\1\52\1\53\1\52\1\54\1\55"+
    "\12\54\1\56\1\57\1\60\1\0\1\1\1\61\1\62"+
    "\1\6\1\7\1\63\1\64\1\0\1\1\1\13\1\0"+
    "\1\65\2\14\1\66\1\0\2\17\1\67\1\70\1\71"+
    "\1\72\1\0\1\73\6\0\1\74\1\0\1\75\1\13"+
    "\2\76\1\77\1\13\1\0\1\100\1\101\2\0\1\102"+
    "\2\0\1\103\7\54\1\104\1\54\1\77\1\0\1\105"+
    "\1\0\1\65\1\0\1\65\1\0\1\106\1\73\3\0"+
    "\1\107\1\0\1\75\1\0\1\75\1\77\1\100\1\101"+
    "\1\102\1\103\1\0\1\103\4\54\1\110\1\60\1\111"+
    "\1\77\1\105\1\65\1\17\4\0\1\75\1\103\1\112"+
    "\1\113\1\114\1\115\2\0\1\116\6\0\1\117\5\0"+
    "\1\120\2\0\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u0344\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u0344\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u0344"+
    "\0\u06ae\0\u06d4\0\u06fa\0\u0344\0\u0720\0\u0746\0\u076c\0\u0344"+
    "\0\u0792\0\u0344\0\u0344\0\u07b8\0\u07de\0\u0344\0\u07b8\0\u0804"+
    "\0\u0344\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u0344\0\u09a6\0\u0344\0\u09cc\0\u09f2"+
    "\0\u0344\0\u0a18\0\u0a3e\0\u0a64\0\u0344\0\u0344\0\u0a8a\0\u0ab0"+
    "\0\u0344\0\u0a8a\0\u0ad6\0\u0344\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0344\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0344\0\u0d36\0\u0d5c\0\u0344"+
    "\0\u0344\0\u0344\0\u0344\0\u0344\0\u0428\0\u0d82\0\u0da8\0\u0344"+
    "\0\u0dce\0\u057e\0\u0df4\0\u0344\0\u0616\0\u0e1a\0\u0e40\0\u0e66"+
    "\0\u063c\0\u0344\0\u0344\0\u07b8\0\u0850\0\u0344\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0344\0\u0f70\0\u0934\0\u0f96"+
    "\0\u0934\0\u0344\0\u0934\0\u0fbc\0\u0fe2\0\u0a8a\0\u1008\0\u102e"+
    "\0\u0b22\0\u0344\0\u1054\0\u107a\0\u0b48\0\u10a0\0\u10c6\0\u10ec"+
    "\0\u1112\0\u1138\0\u115e\0\u1184\0\u0b48\0\u11aa\0\u0344\0\u11d0"+
    "\0\u0344\0\u11f6\0\u0344\0\u121c\0\u05ca\0\u1242\0\u063c\0\u0850"+
    "\0\u1268\0\u128e\0\u12b4\0\u0344\0\u12da\0\u0344\0\u1300\0\u0980"+
    "\0\u0a64\0\u0344\0\u1326\0\u0b22\0\u0344\0\u134c\0\u0b94\0\u1372"+
    "\0\u1398\0\u13be\0\u13e4\0\u0b48\0\u0b48\0\u0b48\0\u0d36\0\u0d82"+
    "\0\u0dce\0\u0e1a\0\u140a\0\u1430\0\u1456\0\u147c\0\u0f70\0\u107a"+
    "\0\u0b48\0\u0b48\0\u0b48\0\u0b48\0\u14a2\0\u14c8\0\u0344\0\u14ee"+
    "\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u0344\0\u15d2\0\u15f8"+
    "\0\u161e\0\u1644\0\u166a\0\u0344\0\u1690\0\u16b6\0\u0344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\23\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\23\1\0\1\35\1\36\30\23"+
    "\1\37\1\25\1\40\1\23\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\23\1\0\1\23\1\41\27\23\1\47"+
    "\1\50\1\25\1\51\1\47\1\52\1\42\1\43\1\44"+
    "\1\45\1\53\1\47\1\0\1\47\1\54\27\47\1\55"+
    "\1\56\1\25\1\57\1\55\1\60\1\42\1\43\1\44"+
    "\1\45\1\61\1\55\1\0\1\55\1\60\4\55\1\62"+
    "\23\55\1\63\1\25\1\57\1\55\1\60\1\42\1\43"+
    "\1\44\1\45\1\61\1\55\1\0\1\55\1\60\27\55"+
    "\1\64\1\65\1\25\10\64\2\0\14\64\1\66\5\64"+
    "\1\67\6\64\1\70\1\71\1\25\10\70\2\0\23\70"+
    "\1\72\1\73\4\70\1\74\1\75\1\25\2\74\1\76"+
    "\1\42\1\43\1\44\1\45\2\74\1\0\1\74\1\77"+
    "\15\74\1\100\11\74\1\101\1\102\1\25\1\103\7\101"+
    "\2\0\2\101\1\104\5\101\1\105\10\101\1\106\1\107"+
    "\4\101\1\110\1\101\1\111\1\112\1\25\1\113\1\111"+
    "\5\114\1\115\1\111\1\0\1\111\1\114\27\111\1\116"+
    "\1\117\1\25\10\116\2\0\30\116\1\120\1\121\1\122"+
    "\1\25\10\121\2\0\31\121\1\111\1\123\1\25\1\124"+
    "\1\111\5\125\2\111\1\0\1\111\1\125\27\111\2\126"+
    "\1\25\10\126\2\0\31\126\1\127\1\130\1\25\2\127"+
    "\5\131\1\127\1\132\1\0\1\127\1\131\25\127\1\133"+
    "\1\127\1\134\1\135\1\25\1\136\7\134\2\0\31\134"+
    "\1\137\1\140\1\25\1\141\1\137\1\142\1\42\1\43"+
    "\1\44\1\45\1\143\1\137\1\0\1\137\1\142\1\144"+
    "\2\137\1\145\2\137\1\146\1\137\1\147\1\150\1\151"+
    "\1\152\13\137\1\153\1\154\1\0\2\153\5\155\2\153"+
    "\1\0\1\153\1\155\27\153\1\23\2\0\2\23\5\0"+
    "\2\23\1\0\1\23\1\0\27\23\1\0\1\24\46\0"+
    "\1\25\43\0\1\26\1\156\1\0\1\23\1\157\5\156"+
    "\2\26\1\156\1\26\1\156\27\26\54\0\1\160\46\0"+
    "\1\161\46\0\1\162\46\0\1\163\34\0\1\23\1\164"+
    "\1\0\2\23\5\164\2\23\1\0\1\23\1\164\27\23"+
    "\1\165\2\0\2\165\5\0\2\165\1\0\1\165\1\0"+
    "\27\165\16\0\1\155\30\0\1\37\44\0\1\40\1\166"+
    "\1\0\1\23\1\167\5\166\2\40\1\166\1\40\1\166"+
    "\27\40\6\0\1\170\46\0\1\170\46\0\1\170\46\0"+
    "\1\170\34\0\1\23\1\41\1\0\2\23\5\41\2\23"+
    "\1\0\1\23\1\41\27\23\1\47\2\0\2\47\5\0"+
    "\2\47\1\0\1\47\1\0\27\47\1\0\1\50\44\0"+
    "\1\51\1\171\1\0\1\172\1\173\5\171\2\51\1\171"+
    "\1\51\1\171\27\51\1\47\1\174\1\0\2\47\5\174"+
    "\2\47\1\0\1\47\1\174\27\47\1\175\2\0\2\175"+
    "\5\0\2\175\1\0\1\175\1\0\27\175\1\55\2\0"+
    "\2\55\5\0\2\55\1\0\1\55\1\0\27\55\1\0"+
    "\1\56\44\0\1\57\1\176\1\0\1\55\1\177\5\176"+
    "\2\57\1\176\1\57\1\176\27\57\1\55\1\60\1\0"+
    "\2\55\5\60\2\55\1\0\1\55\1\60\30\55\2\0"+
    "\2\55\5\0\2\55\1\0\1\55\1\0\10\55\1\200"+
    "\6\55\1\201\7\55\1\0\1\63\45\0\1\65\102\0"+
    "\1\202\32\0\1\203\23\0\1\71\44\0\1\74\2\0"+
    "\2\74\5\0\2\74\1\0\1\74\1\0\27\74\1\0"+
    "\1\75\44\0\1\74\2\0\2\74\5\0\2\74\1\0"+
    "\1\74\1\0\16\74\1\204\10\74\1\0\1\102\44\0"+
    "\2\205\1\0\1\206\1\207\41\205\33\0\1\210\42\0"+
    "\1\211\11\0\1\212\26\0\1\213\47\0\1\214\64\0"+
    "\1\215\1\0\1\111\2\0\2\111\5\0\2\111\1\0"+
    "\1\111\1\0\27\111\1\0\1\112\44\0\1\113\1\216"+
    "\1\0\1\217\1\220\5\216\2\113\1\216\1\113\1\216"+
    "\27\113\1\221\1\222\1\0\2\221\5\222\1\221\1\111"+
    "\1\0\1\221\1\222\27\221\1\0\1\117\111\0\1\120"+
    "\1\0\1\122\45\0\1\123\44\0\1\124\1\156\1\0"+
    "\1\223\1\224\5\156\2\124\1\156\1\124\1\156\27\124"+
    "\1\132\1\225\1\0\2\132\5\0\2\132\1\0\1\132"+
    "\1\0\25\132\1\226\1\132\1\0\1\130\44\0\1\227"+
    "\1\230\1\0\2\227\5\0\2\227\1\0\1\227\1\0"+
    "\27\227\1\0\1\135\44\0\2\231\1\0\1\232\1\233"+
    "\41\231\1\137\2\0\2\137\5\0\2\137\1\0\1\137"+
    "\1\0\27\137\1\0\1\140\44\0\1\141\1\234\1\0"+
    "\1\235\1\236\5\234\2\141\1\234\1\141\1\234\27\141"+
    "\1\137\1\142\1\0\2\137\5\142\2\137\1\0\1\137"+
    "\1\142\30\137\2\0\2\137\5\0\2\137\1\0\1\137"+
    "\1\0\1\137\1\237\26\137\2\0\2\137\5\0\2\137"+
    "\1\0\1\137\1\0\4\137\1\240\23\137\2\0\2\137"+
    "\5\0\2\137\1\0\1\137\1\0\1\241\1\137\1\242"+
    "\25\137\2\0\2\137\5\0\2\137\1\0\1\137\1\0"+
    "\4\137\1\243\23\137\2\0\2\137\5\0\2\137\1\0"+
    "\1\137\1\0\6\137\1\244\21\137\2\0\2\137\5\0"+
    "\2\137\1\0\1\137\1\0\10\137\1\245\17\137\2\0"+
    "\2\137\5\0\2\137\1\0\1\137\1\0\6\137\1\246"+
    "\20\137\1\153\2\0\2\153\5\0\2\153\1\0\1\153"+
    "\1\0\27\153\1\0\1\154\44\0\2\156\1\0\1\247"+
    "\1\250\41\156\1\26\1\156\1\0\1\26\1\157\5\156"+
    "\2\26\1\156\1\26\1\156\27\26\2\166\1\0\1\251"+
    "\1\252\41\166\1\40\1\166\1\0\1\40\1\167\5\166"+
    "\2\40\1\166\1\40\1\166\27\40\2\171\1\0\1\253"+
    "\1\254\41\171\1\51\1\171\1\0\1\255\1\173\5\171"+
    "\2\51\1\171\1\51\1\171\27\51\2\176\1\0\1\60"+
    "\1\256\41\176\1\57\1\176\1\0\1\57\1\177\5\176"+
    "\2\57\1\176\1\57\1\176\27\57\1\55\2\0\2\55"+
    "\5\0\2\55\1\0\1\55\1\0\10\55\1\257\16\55"+
    "\2\205\1\0\1\260\1\207\41\205\37\0\1\261\36\0"+
    "\1\262\46\0\1\263\40\0\1\264\50\0\1\265\16\0"+
    "\2\216\1\0\1\266\1\267\41\216\1\113\1\216\1\0"+
    "\1\270\1\220\5\216\2\113\1\216\1\113\1\216\27\113"+
    "\1\124\1\156\1\0\1\271\1\224\5\156\2\124\1\156"+
    "\1\124\1\156\27\124\1\0\1\225\42\0\1\272\1\0"+
    "\1\227\1\225\1\0\2\227\5\0\2\227\1\0\1\227"+
    "\1\0\27\227\1\273\1\230\1\0\2\273\5\0\2\273"+
    "\1\0\1\273\1\0\27\273\2\231\1\0\1\274\1\233"+
    "\41\231\2\234\1\0\1\275\1\276\41\234\1\141\1\234"+
    "\1\0\1\277\1\236\5\234\2\141\1\234\1\141\1\234"+
    "\27\141\1\137\2\0\2\137\5\0\2\137\1\0\1\137"+
    "\1\0\2\137\1\300\25\137\2\0\2\137\5\0\2\137"+
    "\1\0\1\137\1\0\5\137\1\301\22\137\2\0\2\137"+
    "\5\0\2\137\1\0\1\137\1\0\7\137\1\302\20\137"+
    "\2\0\2\137\5\0\2\137\1\0\1\137\1\0\13\137"+
    "\1\303\14\137\2\0\2\137\5\0\2\137\1\0\1\137"+
    "\1\0\11\137\1\304\16\137\2\0\2\137\5\0\2\137"+
    "\1\0\1\137\1\0\14\137\1\305\13\137\2\0\2\137"+
    "\5\0\2\137\1\0\1\137\1\0\5\137\1\306\21\137"+
    "\2\156\1\0\1\307\1\250\41\156\2\166\1\0\1\310"+
    "\1\252\41\166\2\171\1\0\1\311\1\254\41\171\2\176"+
    "\1\0\1\312\1\256\41\176\25\0\1\313\43\0\1\314"+
    "\54\0\1\315\44\0\1\316\14\0\2\216\1\0\1\317"+
    "\1\267\41\216\1\273\2\0\2\273\5\0\2\273\1\0"+
    "\1\273\1\0\27\273\2\234\1\0\1\320\1\276\41\234"+
    "\1\137\2\0\2\137\5\0\2\137\1\0\1\137\1\0"+
    "\2\137\1\321\25\137\2\0\2\137\5\0\2\137\1\0"+
    "\1\137\1\0\4\137\1\322\23\137\2\0\2\137\5\0"+
    "\2\137\1\0\1\137\1\0\4\137\1\323\23\137\2\0"+
    "\2\137\5\0\2\137\1\0\1\137\1\0\6\137\1\324"+
    "\20\137\42\0\1\325\33\0\1\326\41\0\1\327\57\0"+
    "\1\330\33\0\1\331\42\0\1\332\51\0\1\333\63\0"+
    "\1\334\27\0\1\335\57\0\1\336\33\0\1\337\63\0"+
    "\1\340\32\0\1\341\42\0\1\342\52\0\1\343\34\0"+
    "\1\344\55\0\1\345\37\0\1\346\60\0\1\347\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5852];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\4\1\1\11\11\1\1\11\10\1\1\11\5\1"+
    "\1\11\3\1\1\11\3\1\1\11\1\1\2\11\2\1"+
    "\1\11\2\1\1\11\12\1\1\11\1\1\1\11\2\1"+
    "\1\11\3\1\2\11\2\1\1\11\1\0\1\1\1\11"+
    "\5\1\1\11\12\1\1\11\1\0\1\1\5\11\1\1"+
    "\1\0\1\1\1\11\1\0\2\1\1\11\1\1\1\0"+
    "\3\1\2\11\1\1\1\0\1\11\6\0\1\11\1\0"+
    "\3\1\1\11\2\1\1\0\2\1\2\0\1\11\2\0"+
    "\12\1\1\11\1\0\1\11\1\0\1\11\1\0\1\1"+
    "\1\0\2\1\3\0\1\11\1\0\1\11\1\0\2\1"+
    "\1\11\2\1\1\11\1\0\14\1\4\0\6\1\2\0"+
    "\1\11\6\0\1\11\5\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(COMMAND); yypushback(yylength());
            } 
            // fall through
          case 82: break;
          case 2: 
            { yybegin(YYINITIAL); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 3: 
            { yybegin(NEXT_SYM); yypushback(yylength());
            } 
            // fall through
          case 84: break;
          case 4: 
            { yybegin(YYINITIAL); return BatchTokenTypes.PIPE_OPERATOR;
            } 
            // fall through
          case 85: break;
          case 5: 
            { yybegin(YYINITIAL); return BatchTokenTypes.APPEND_OPERATOR;
            } 
            // fall through
          case 86: break;
          case 6: 
            { yybegin(YYINITIAL); return BatchTokenTypes.GET_OPERATOR;
            } 
            // fall through
          case 87: break;
          case 7: 
            { yybegin(YYINITIAL); return BatchTokenTypes.PUT_OPERATOR;
            } 
            // fall through
          case 88: break;
          case 8: 
            { yybegin(LABEL); return BatchTokenTypes.LABEL_MARKER;
            } 
            // fall through
          case 89: break;
          case 9: 
            { yybegin(NEXT_SYM); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 90: break;
          case 10: 
            { yybegin(NEXT_SYM); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 91: break;
          case 11: 
            { yybegin(YYINITIAL); yypushback(yylength());
            } 
            // fall through
          case 92: break;
          case 12: 
            { yybegin(CALL); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 93: break;
          case 13: 
            { yybegin(CALL); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 94: break;
          case 14: 
            { yybegin(CALL); return BatchTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 95: break;
          case 15: 
            { yybegin(ECHO_SYM); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 96: break;
          case 16: 
            { yybegin(ECHO); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 97: break;
          case 17: 
            { yybegin(ECHO_SYM); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 98: break;
          case 18: 
            { yybegin(FOR); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 99: break;
          case 19: 
            { yybegin(FOR); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 100: break;
          case 20: 
            { yybegin(FOR_IN); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 101: break;
          case 21: 
            { yybegin(FOR_IN); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 102: break;
          case 22: 
            { yybegin(FOR_IN); return BatchTokenTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 103: break;
          case 23: 
            { yybegin(FOR); return BatchTokenTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 104: break;
          case 24: 
            { yybegin(GOTO); return BatchTokenTypes.LABEL_REFERENCE;
            } 
            // fall through
          case 105: break;
          case 25: 
            { yybegin(GOTO); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 106: break;
          case 26: 
            { yybegin(GOTO); return BatchTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 107: break;
          case 27: 
            { yybegin(IF); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 108: break;
          case 28: 
            { yybegin(IF); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 109: break;
          case 29: 
            { yybegin(IF_EXIST); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 110: break;
          case 30: 
            { yybegin(IF_EXIST); return BatchTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 111: break;
          case 31: 
            { yybegin(IF_DIGIT); return BatchTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 112: break;
          case 32: 
            { yybegin(IF_DIGIT); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 113: break;
          case 33: 
            { yybegin(YYINITIAL); return BatchTokenTypes.DIGIT;
            } 
            // fall through
          case 114: break;
          case 34: 
            { yybegin(IF_VARIABLE); return BatchTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 115: break;
          case 35: 
            { yybegin(IF_VARIABLE); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 116: break;
          case 36: 
            { yybegin(IF_EQUAL); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 117: break;
          case 37: 
            { yybegin(IF_EQUAL); return BatchTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 118: break;
          case 38: 
            { yybegin(REM); return BatchTokenTypes.COMMENT;
            } 
            // fall through
          case 119: break;
          case 39: 
            { yybegin(SET); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 120: break;
          case 40: 
            { yybegin(SET); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 121: break;
          case 41: 
            { yybegin(SET_VALUE); return BatchTokenTypes.EQUAL_OPERATOR;
            } 
            // fall through
          case 122: break;
          case 42: 
            { yybegin(SET_VALUE); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 123: break;
          case 43: 
            { yybegin(SET_VALUE); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 124: break;
          case 44: 
            { yybegin(COMMAND); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 125: break;
          case 45: 
            { yybegin(COMMAND); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 126: break;
          case 46: 
            { yybegin(REM);  return BatchTokenTypes.LABEL;
            } 
            // fall through
          case 127: break;
          case 47: 
            { yybegin(LABEL); return BatchTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 48: 
            { yybegin(REM); yypushback(yylength());
            } 
            // fall through
          case 129: break;
          case 49: 
            { yybegin(YYINITIAL); return BatchTokenTypes.OR_OPERATOR;
            } 
            // fall through
          case 130: break;
          case 50: 
            { yybegin(YYINITIAL); return BatchTokenTypes.AND_OPERATOR;
            } 
            // fall through
          case 131: break;
          case 51: 
            { yybegin(YYINITIAL); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 132: break;
          case 52: 
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTokenTypes.ECHO_OFF_MARKER;
            } 
            // fall through
          case 133: break;
          case 53: 
            { yybegin(CALL); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 134: break;
          case 54: 
            { yybegin(CALL); return BatchTokenTypes.LABEL_REFERENCE;
            } 
            // fall through
          case 135: break;
          case 55: 
            { yybegin(YYINITIAL); return BatchTokenTypes.ON_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 56: 
            { yybegin(FOR_IN); return BatchTokenTypes.IN_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 57: 
            { yybegin(YYINITIAL); return BatchTokenTypes.DO_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 58: 
            { yybegin(GOTO); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 139: break;
          case 59: 
            { yybegin(IF); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 140: break;
          case 60: 
            { yybegin(IF_EQUAL); return BatchTokenTypes.EQUAL_OPERATOR;
            } 
            // fall through
          case 141: break;
          case 61: 
            { yybegin(IF_EXIST); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 142: break;
          case 62: 
            { yybegin(IF_EXIST); return BatchTokenTypes.EXPRESSION;
            } 
            // fall through
          case 143: break;
          case 63: 
            { yybegin(YYINITIAL); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 144: break;
          case 64: 
            { yybegin(SET); yypushback(1); return BatchTokenTypes.ENVIRONMENT_VARIABLE_DEFINITION;
            } 
            // fall through
          case 145: break;
          case 65: 
            { yybegin(SET_VALUE); yypushback(yylength() - 1); return BatchTokenTypes.EQUAL_OPERATOR;
            } 
            // fall through
          case 146: break;
          case 66: 
            { yybegin(SET_VALUE); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 147: break;
          case 67: 
            { yybegin(COMMAND); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 148: break;
          case 68: 
            { yybegin(IF); return BatchTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 69: 
            { yybegin(NEXT_SYM); return BatchTokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 150: break;
          case 70: 
            { yybegin(YYINITIAL); return BatchTokenTypes.OFF_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 71: 
            { yybegin(IF); return BatchTokenTypes.NOT_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 72: 
            { yybegin(FOR); return BatchTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 73: 
            { yybegin(SET); return BatchTokenTypes.SET_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 74: 
            { yybegin(CALL); return BatchTokenTypes.CALL_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 75: 
            { yybegin(GOTO); return BatchTokenTypes.GOTO_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 76: 
            { yybegin(ECHO); return BatchTokenTypes.ECHO_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 77: 
            { yybegin(COMMAND); return BatchTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 78: 
            { yybegin(IF_EXIST); return BatchTokenTypes.EXIST_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 79: 
            { yybegin(IF_VARIABLE); return BatchTokenTypes.DEFINED_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 80: 
            { yybegin(IF_DIGIT); return BatchTokenTypes.ERRORLEVEL_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 81: 
            { yybegin(IF_DIGIT); return BatchTokenTypes.CMDEXTVERSION_KEYWORD;
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
